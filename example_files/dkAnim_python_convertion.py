if

import maya.cmds as cmds
import maya.mel as mel


def dk_animWrite(filename, hi):
    # This is the temp file name and
    filename = 'C:/Users/cmj140030/code/test_file_python.txt'
    hi = True


parent = 0
weighted = 0
preIn = "constant"
postIn = "constant"
selected = cmds.ls(selection=True)

test = True
if test:
    fileID = file(filename, "w")
    fileID.write(
        "#Generated by dkAnim.mel\n#\n#dkAnim written by Daniel Kramer\n#danl_kramer@yahoo.com\n")
    fileID.write("#Written out of " + cmds.file(query=True, sceneName=True) + "\n#\n\n")

    if hi:
        cmds.select(hierarchy=True)
    objects = cmds.ls(selection=True, long=True)

    for item in objects:

        shortItem = cmds.ls(item, selection=True)
        channels = cmds.listConnections(item, type='animCurve')
        if not channels:
            continue

        for chan in channels:
            connects = cmds.listConnections(chan, plugs=True)
            curAttr = connects[0]
            buffer = curAttr.split('.')
            attr = buffer.pop()
            node = ".".join(buffer)
            nodeTemp = cmds.ls(node, long=True)

            node = nodeTemp[0]
            nodeTemp = cmds.listRelatives(node, parent=True)
            if nodeTemp and nodeTemp[0] != 1:
                parent = 1
            else:
                parent = 0

            testit = cmds.listAnimatable(curAttr)
            testit2 = cmds.keyframe(chan, query=True)

            if testit and testit2 and (len(testit2)):
                infin_attr = "%s.preInfinity" % chan
                evalme = cmds.getAttr(infin_attr)
                if evalme == 0:
                    preIn = 'constant'
                elif evalme == 1:
                    preIn = 'linear'
                elif evalme == 2:
                    preIn = 'constant'
                elif evalme == 3:
                    preIn = 'cycle'
                elif evalme == 4:
                    preIn = 'cycleRelative'
                elif evalme == 5:
                    preIn = 'oscillate'

                infin_attr = "%s.postInfinity" % chan
                evalme = cmds.getAttr(infin_attr)
                fileID.write(
                    "anim " + str(attr) + " " + str(attr) + " " + str(node) + " " + str(
                        parent) + " 0 0;\n")
                fileID.write("animData {\n")
                fileID.write("  weighted " + str(weighted) + ";\n")
                fileID.write("  preInfinity " + str(preIn) + ";\n")
                fileID.write("  postInfinity " + str(postIn) + ";\n")
                fileID.write("  keys {\n")

                if evalme == 0:
                    postIn = 'constant'
                elif evalme == 1:
                    postIn = 'linear'
                elif evalme == 2:
                    postIn = 'constant'
                elif evalme == 3:
                    postIn = 'cycle'
                elif evalme == 4:
                    postIn = 'cycleRelative'
                elif evalme == 5:
                    postIn = 'oscillate'

                evalme = "%s.weightedTangents" % chan
                weighted = cmds.getAttr(evalme)
                if not weighted:
                    weighted = 0

                keys = cmds.keyframe(chan, query=True)
                values = cmds.keyframe(chan, query=True, valueChange=True)
                inTan = mel.eval(('keyTangent -q -itt "%s"') % chan)
                outTan = mel.eval(('keyTangent -q -ott "%s"') % chan)
                tanLock = mel.eval(('keyTangent -q -lock "%s"') % chan)
                weightLock = mel.eval(('keyTangent -q -weightLock "%s"') % chan)
                breakdown = cmds.keyframe(chan, query=True, breakdown=True)
                inAngle = mel.eval(('keyTangent -q -inAngle "%s"') % chan)
                outAngle = mel.eval(('keyTangent -q -outAngle "%s"') % chan)
                inWeight = mel.eval(('keyTangent -q -inWeight "%s"') % chan)
                outWeight = mel.eval(('keyTangent -q -outWeight "%s"') % chan)

                for i in range(len(keys)):
                    bd = 0
                    if breakdown:
                        for bd_item in breakdown:
                            if bd_item == keys:
                                bd = 1
                    fileID.write("    " + str(keys[i]) + " " + str(values[i]) + " " + str(
                        inTan[i]) + " " + str(outTan[i]) + " " + str(
                        tanLock[i]) + " " + str(weightLock[i]) + " " + str(bd))
                    if inTan == "fixed":
                        fileID.write(" " + str(inAngle[i]) + " " + str(inWeight[i]))

                    if outTan == "fixed":
                        fileID.write(" " + str(outAngle[i]) + " " + str(outWeight[i]))
                    fileID.write(";\n")

                fileID.write("  }\n}\n")

        staticChans = cmds.listAnimatable(item)
        for staticChan in staticChans:
            curAttr = staticChan

            buffer = staticChan.split('.')
            attr = buffer.pop()
            node = ".".join(buffer)
            nodeTemp = cmds.ls(node, long=True)
            node = nodeTemp[0]
            nodeTemp = cmds.listRelatives(node, parent=True)

            if nodeTemp and nodeTemp[0] != 1:
                parent = 0
            else:
                parent = 1

            staticChan = (node + "." + attr)
            testit = cmds.keyframe(staticChan, query=True)
            connected = cmds.listConnections(staticChan, destination=False)
            if (testit == 0 and connected[0] == ""):
                print "\nWe are inside the if statement\n"
                fileID.write(
                    "static " + str(attr) + " " + str(attr) + " " + str(node) + " " + str(
                        parent) + " " + str(cmds.getAttr(staticChan)) + "\n")

fileID.close()
cmds.select(clear=True)
for item in selected:
    cmds.select(item, toggle=True)
print "Done Writing Animation Curves\n"

dk_animWrite(filename='C:/Users/cmj140030/code/test_file_python.txt', hi=True)
